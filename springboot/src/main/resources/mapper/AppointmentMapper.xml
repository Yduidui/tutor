<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.springboot.mapper.AppointmentMapper">

    <resultMap id="BaseResultMap" type="com.example.springboot.entity.Appointment">
        <id column="id" property="id"/>
        <result column="course_id" property="courseId"/>
        <result column="teacher_id" property="teacherId"/>
        <result column="date" property="date"/>
        <result column="start_time" property="startTime"/>
        <result column="end_time" property="endTime"/>
        <result column="student_id" property="studentId"/>
        <result column="status" property="status"/>
    </resultMap>

    <select id="selectAll" resultMap="BaseResultMap">
        SELECT appointment_slot.*,
            course.title AS courseTitle,
            teacher.name AS teacherName,
            student.name AS studentName
        FROM appointment_slot
                 LEFT JOIN course ON appointment_slot.course_id = course.id
                 LEFT JOIN teacher ON appointment_slot.teacher_id = teacher.id
                 LEFT JOIN student ON appointment_slot.student_id = student.id
        <where>
            <if test="id != null">
                appointment_slot.id = #{id}
            </if>
            <if test="status != null and status != ''">
                appointment_slot.status = #{status}
            </if>
            <if test="courseTitle != null and courseTitle != ''">
                AND course.title LIKE CONCAT('%', #{courseTitle}, '%')
            </if>
        </where> <!-- 确保 id 来自 course 表 -->
        GROUP BY appointment_slot.id       <!-- 加入 GROUP BY 以便于使用聚合函数 -->
    </select>

    <select id="selectById" resultMap="BaseResultMap">
        SELECT appointment_slot.*,
            course.title AS courseTitle,
            teacher.name AS teacherName,
            student.name AS studentName
        FROM appointment_slot
                 LEFT JOIN course ON appointment_slot.course_id = course.id
                 LEFT JOIN teacher ON appointment_slot.teacher_id = teacher.id
                 LEFT JOIN student ON appointment_slot.student_id = student.id
        WHERE appointment_slot.id = #{id}
    </select>

    <select id="selectByCourseId" resultMap="BaseResultMap">
        SELECT appointment_slot.*,
            course.title AS courseTitle
        FROM appointment_slot
                 LEFT JOIN course ON appointment_slot.course_id = course.id
        WHERE course_id = #{courseId}
    </select>

    <select id="selectByTeacherId" resultMap="BaseResultMap">
        SELECT appointment_slot.*,
               course.title AS courseTitle,
               teacher.name AS teacherName,
               student.name AS studentName
        FROM appointment_slot
                 LEFT JOIN course ON appointment_slot.course_id = course.id
                 LEFT JOIN teacher ON appointment_slot.teacher_id = teacher.id
                 LEFT JOIN student ON appointment_slot.student_id = student.id
        WHERE appointment_slot.teacher_id = #{teacherId}
        GROUP BY appointment_slot.id
    </select>


    <select id="selectByStudentId" resultMap="BaseResultMap">
        SELECT appointment_slot.*,
               course.title AS courseTitle,
               teacher.name AS teacherName,
               student.name AS studentName
        FROM appointment_slot
                 LEFT JOIN course ON appointment_slot.course_id = course.id
                 LEFT JOIN teacher ON appointment_slot.teacher_id = teacher.id
                 LEFT JOIN student ON appointment_slot.student_id = student.id
        WHERE appointment_slot.student_id = #{studentId}
        GROUP BY appointment_slot.id
    </select>


    <select id="selectAvailableSlots" resultMap="BaseResultMap">
        SELECT * FROM appointment_slot WHERE course_id = #{courseId} AND status = 'available'
    </select>

    <insert id="insert" parameterType="com.example.springboot.entity.Appointment">
        INSERT INTO appointment_slot(course_id, teacher_id, date, start_time, end_time, student_id, status)
        VALUES(#{courseId}, #{teacherId}, #{date}, #{startTime}, #{endTime}, #{studentId}, #{status})
    </insert>

    <update id="updateStatus">
        UPDATE appointment_slot
        SET student_id = #{studentId}, status = #{status}
        WHERE id = #{id}
    </update>
    <delete id="deleteById">
        DELETE FROM appointment_slot WHERE id = #{id}
    </delete>

    <delete id="deleteByCourseId">
        DELETE FROM appointment_slot WHERE course_id = #{courseId}
    </delete>

    <!-- 获取教师订单数 -->
    <select id="getTotalAppointments" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM appointment_slot
        WHERE teacher_id = #{teacherId}
    </select>

    <select id="getAppointmentDistribution" resultType="java.util.Map">
        SELECT
        <choose>
            <!-- 按年分组 -->
            <when test="timeRange == 'year'">
                DATE_FORMAT(start_time, '%Y') AS date
            </when>
            <!-- 按月分组 -->
            <when test="timeRange == 'month'">
                DATE_FORMAT(start_time, '%Y-%m') AS date
            </when>
            <!-- 按周分组 -->
            <when test="timeRange == 'week'">
                CONCAT(YEAR(start_time), '-', WEEK(start_time)) AS date
            </when>
            <!-- 按天分组 -->
            <when test="timeRange == 'day'">
                DATE_FORMAT(start_time, '%m-%d') AS date
            </when>
        </choose>,
        COUNT(*) AS count
        FROM `appointment_slot`
        WHERE teacher_id = #{teacherId}
        GROUP BY date
        ORDER BY date ASC
    </select>




</mapper>